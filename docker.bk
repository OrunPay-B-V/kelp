# FROM golang:stretch
# FROM node:current-slim
# RUN mkdir -p /kelp
# WORKDIR /kelp
# COPY . .
# EXPOSE 3000 8000
# CMD ["./bin/kelp", "server", "--no-electron", "-c", "./examples/configs/trader/sample_custom_config.cfg"]
############## OG ################

# FROM golang:1.12.7

# # install yarn
# RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
# RUN echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
# RUN apt update
# RUN apt -y install yarn

# # set working dir
# WORKDIR /go/src/github.com/stellar/kelp
# RUN pwd

# # install glide
# # RUN curl -s https://glide.sh/get | sh
# RUN go get -u github.com/Masterminds/glide

# # install kelp
# ENV GOPATH /go
# RUN git clone https://github.com/stellar/kelp.git .
# RUN git fetch --tags
# RUN glide install
# RUN ./scripts/build.sh

# # set ulimit
# RUN ulimit -n 10000

# # use command line arguments from invocation of docker run against this ENTRYPOINT command - https://stackoverflow.com/a/40312311/1484710
# ENTRYPOINT ["./bin/kelp"]

# sample command to run this container as a daemon process:
# docker run -v `pwd`/ops:/go/src/github.com/stellar/kelp/bin/ops -d -p 8011:8011 <image> server -p 8011 --ccxt-rest-url=http://host.docker.internal:3000
# this assumes that you are running ccxt on port 3000 outside this kelp docker container
# the three port numbers (8011 in the example above) must be the same and must be specified
# the first part of the -v argument is the directory where you want to save the kelp configs and kelp logs from the bots created in this container

FROM golang:1.13.10
# FROM golang:1.13.8

# #apt update
# RUN apt update

# #install nodejg
# RUN apt -y install nodejs
# RUN apt -y install npm

# #install yarn
# RUN npm install --global yarn

# install yarn
RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
RUN echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
RUN apt update
RUN apt -y install yarn

# set working dir
WORKDIR /go/src/github.com/stellar/kelp

#fix cloning error: error: RPC failed; curl 56 GnuTLS recv error (-24): Decryption has failed.
RUN apt install openssl
RUN git config --global http.sslVerify false
# RUN git config --global http.postBuffer 1048576000



ENV GOPATH /go
ENV GLIDE_PATH $GOPATH/src/github.com/Masterminds/glide
ENV ASTILELECTRON_PATH $GOPATH/src/github.com/asticode/go-astilectron-bundler
ENV KELP_PATH $GOPATH/src/github.com/stellar/kelp

# install glide
RUN go get -u github.com/Masterminds/glide

# install kelp
RUN git clone https://github.com/orunpay/kelp .
RUN git fetch --tags
RUN glide install

# install astielectron
RUN go get -u github.com/asticode/go-astilectron-bundler/...
RUN go install github.com/asticode/go-astilectron-bundler/astilectron-bundler

# needed libtool for sodium
# RUN apt-get install -y autoconf automake g++ libtool

# run build script
RUN ./scripts/build.sh

# set ulimit
RUN ulimit -n 10000

# use command line arguments from invocation of docker run against this ENTRYPOINT command - https://stackoverflow.com/a/40312311/1484710
ENTRYPOINT ["./bin/kelp"]





























# FROM golang:stretch
# FROM node:current-slim
# RUN mkdir -p /kelp
# WORKDIR /kelp
# COPY . .
# EXPOSE 3000 8000
# CMD ["./bin/kelp", "server", "--no-electron", "-c", "./examples/configs/trader/sample_custom_config.cfg"]
############## OG ################

# FROM golang:1.12.7

# # install yarn
# RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
# RUN echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
# RUN apt update
# RUN apt -y install yarn

# # set working dir
# WORKDIR /go/src/github.com/stellar/kelp
# RUN pwd

# # install glide
# # RUN curl -s https://glide.sh/get | sh
# RUN go get -u github.com/Masterminds/glide

# # install kelp
# ENV GOPATH /go
# RUN git clone https://github.com/stellar/kelp.git .
# RUN git fetch --tags
# RUN glide install
# RUN ./scripts/build.sh

# # set ulimit
# RUN ulimit -n 10000

# # use command line arguments from invocation of docker run against this ENTRYPOINT command - https://stackoverflow.com/a/40312311/1484710
# ENTRYPOINT ["./bin/kelp"]

# sample command to run this container as a daemon process:
# docker run -v `pwd`/ops:/go/src/github.com/stellar/kelp/bin/ops -d -p 8011:8011 <image> server -p 8011 --ccxt-rest-url=http://host.docker.internal:3000
# this assumes that you are running ccxt on port 3000 outside this kelp docker container
# the three port numbers (8011 in the example above) must be the same and must be specified
# the first part of the -v argument is the directory where you want to save the kelp configs and kelp logs from the bots created in this container

FROM golang:1.13.10
LABEL maintainer="Demon <Github: @sanjsingh07>"

# install yarn
RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
RUN echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
RUN apt update
RUN apt -y install yarn

# set working dir
WORKDIR /go/src/github.com/stellar/kelp

ENV GOPATH /go

# install glide
RUN go get -u github.com/Masterminds/glide

# install kelp
RUN git clone https://github.com/orunpay/kelp .
RUN git fetch --tags
RUN glide install

# install astielectron
RUN go get -u github.com/asticode/go-astilectron-bundler/...
RUN go install github.com/asticode/go-astilectron-bundler/astilectron-bundler


# needed libtool for sodium
# RUN apt-get install -y autoconf automake g++ libtool

# run build script
RUN ./scripts/build.sh

# set ulimit
RUN ulimit -n 10000

# use command line arguments from invocation of docker run against this ENTRYPOINT command - https://stackoverflow.com/a/40312311/1484710
ENTRYPOINT ["./bin/kelp"]